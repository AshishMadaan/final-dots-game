{"version":3,"sources":["js/util.js","js/dot.js","js/modal.js","js/state.js","js/timer.js","js/constant.js","js/index.js"],"names":["generateRandomNumber","min","max","Math","floor","random","updateScoreDOM","newScore","document","getElementById","innerHTML","updateSliderHTML","newValue","updateScore","state","scoreToAdd","$currentScore","score","toggleStartBtn","isPlaying","removeDot","dot","removeEventListener","parentNode","removeChild","getPosition","dotSize","maxWidth","querySelector","clientWidth","getAnimationTime","fallRate","window","innerHeight","addPointToScore","dataset","value","resetGameBoard","gameInterval","gameInitialState","currentSpeed","clearInterval","removeAllDots","querySelectorAll","forEach","cage","displayElement","element","classList","add","pauseDots","style","WebkitAnimationPlayState","disabled","addDot","initialSize","$gameBoard","randomNum","dotConfig","size","position","dotHTML","createElement","setAttribute","addEventListener","appendChild","openModal","modal","$closeModalButton","remove","instance","GameStore","$slider","prop","Object","freeze","startTimer","winningConfig","$timer","$clearBtn","$stopWatch","counter","timeLimit","gameTimer","setInterval","num","zero","click","toString","length","Array","join","clearTimer","timerId","SMALL_VIEWPORT","INITIAL_SIZE","INITIAL_SLIDER_VALUE","NEW_DOT_INTERVAL","isCompetition","scoreToComplete","dotsGameInit","config","$startButton","$resetButton","$modeSelectionDD","$changeMode","defaultConfig","getState","innerWidth","event","target","setState","initialState"],"mappings":"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","file":"js.88445855.js","sourceRoot":"../src","sourcesContent":["const generateRandomNumber = (min, max) =>\n  Math.floor(Math.random() * (max - min)) + min;\n\nconst updateScoreDOM = (newScore) => {\n  const $currentScore = document.getElementById(\"currentScore\");\n  $currentScore.innerHTML = newScore;\n};\n\nconst updateSliderHTML = (newValue) => {\n  const $currentSpeed = document.getElementById(\"currentSpeed\");\n  $currentSpeed.innerHTML = `${newValue}`;\n};\n\nconst updateScore = (state, scoreToAdd) => {\n  const $currentScore = document.getElementById(\"currentScore\");\n  state.score += +scoreToAdd;\n  $currentScore.innerHTML = state.score;\n};\n\nconst toggleStartBtn = (isPlaying) => {\n  const $startBtn = document.getElementById(\"startBtn\");\n  $startBtn.innerHTML = isPlaying ? \"Pause\" : \"Start\";\n};\n\n// Dots methods\nconst removeDot = (dot) => {\n  dot.removeEventListener(\"animationend\", removeDot);\n  dot.parentNode.removeChild(dot);\n};\n\nconst getPosition = (dotSize) => {\n  const maxWidth = document.querySelector(\".game__board\").clientWidth;\n  const leftPosition = generateRandomNumber(0, maxWidth - dotSize);\n  return leftPosition;\n};\n\nconst getAnimationTime = (fallRate) => {\n  const windowHeight = window.innerHeight;\n  return windowHeight / fallRate;\n};\n\nconst addPointToScore = (state, dot) => {\n  if (state.isPlaying) {\n    updateScore(state, dot.dataset.value);\n    removeDot(dot);\n  }\n};\n\nconst resetGameBoard = (gameInterval, gameInitialState) => {\n  gameInitialState.score = 0;\n  gameInitialState.isPlaying = false;\n  gameInitialState.currentSpeed = 50;\n  updateScoreDOM(0);\n  updateSliderHTML(gameInitialState.currentSpeed);\n  toggleStartBtn(false);\n  document.getElementById(\"currentSpeed\").value = gameInitialState.currentSpeed;\n  document.getElementById(\"speedControl\").value = gameInitialState.currentSpeed;\n  clearInterval(gameInterval);\n\n  // Remove all dots from dom\n  removeAllDots();\n};\n\nconst removeAllDots = () => {\n  const dots = document.querySelectorAll(\".dot\");\n  dots.forEach((cage) => {\n    removeDot(cage);\n  });\n};\n\nconst displayElement = (element) => {\n  element.classList.add(\"show\");\n};\n\nconst pauseDots = (isPlaying = false) => {\n  const $dots = document.querySelectorAll(\".dot\");\n  $dots.forEach((dot) => {\n    dot.style.WebkitAnimationPlayState = isPlaying ? \"running\" : \"paused\";\n    if (isPlaying) {\n      dot.disabled = false;\n    } else {\n      dot.disabled = true;\n    }\n  });\n};\n\nexport {\n  generateRandomNumber,\n  updateScore,\n  updateScoreDOM,\n  toggleStartBtn,\n  updateSliderHTML,\n  getPosition,\n  getAnimationTime,\n  addPointToScore,\n  resetGameBoard,\n  removeAllDots,\n  displayElement,\n  pauseDots,\n  removeDot\n};\n","import {\n  removeDot,\n  generateRandomNumber,\n  getPosition,\n  getAnimationTime,\n  addPointToScore\n} from \"./util\";\n\nexport const addDot = (state, initialSize) => {\n  const $gameBoard = document.querySelector(\".game__board\");\n  const randomNum = generateRandomNumber(0, 10);\n\n  const dotSize = randomNum * 10 + initialSize;\n  const dotConfig = {\n    size: dotSize,\n    value: 10 - randomNum,\n    position: getPosition(dotSize)\n  };\n\n  const dotHTML = document.createElement(\"div\");\n  dotHTML.classList.add(\"dot\");\n  dotHTML.setAttribute(\n    \"style\",\n    `\n    height: ${dotConfig.size}px;\n    width: ${dotConfig.size}px;\n    animation: slideDown ${getAnimationTime(state.currentSpeed)}s linear;\n    left: ${dotConfig.position}px;\n    `\n  );\n  dotHTML.setAttribute(\"data-value\", `${dotConfig.value}`);\n  dotHTML.addEventListener(\"click\", () => addPointToScore(state, dotHTML));\n  dotHTML.addEventListener(\"animationend\", () => removeDot(dotHTML));\n\n  $gameBoard.appendChild(dotHTML);\n};\n","import { toggleStartBtn, pauseDots, resetGameBoard } from \"./util\";\n\nconst openModal = (gameInterval, state) => {\n  const modal = document.querySelector(\".modal__overlay\");\n  const $closeModalButton = document.querySelector(\".close\");\n\n  modal.classList.add(\"active\");\n  pauseDots();\n  toggleStartBtn(false);\n\n  $closeModalButton.addEventListener(\"click\", () => {\n    const modal = document.querySelector(\".modal__overlay\");\n    modal.classList.remove(\"active\");\n    resetGameBoard(gameInterval, state);\n  });\n};\n\nexport { openModal };\n","// let gameInitialState = {\n//   currentSpeed: $slider.value,\n//   score: 0,\n//   isPlaying: false\n// };\n\nclass GameStore {\n  constructor() {\n    const $slider = document.getElementById(\"speedControl\");\n    if (!GameStore.instance) {\n      this.state = {\n        currentSpeed: $slider.value,\n        score: 0,\n        isPlaying: false\n      };\n      GameStore.instance = this;\n    }\n\n    return GameStore.instance;\n  }\n\n  setState(prop, value) {\n    this.state[prop] = value;\n  }\n\n  getState(prop) {\n    return this.state[prop];\n  }\n}\n\nconst instance = new GameStore();\nObject.freeze(instance);\n\nexport default instance;\n","import { openModal } from \"./modal\";\nimport instance from \"./state\";\n\nconst startTimer = (gameInterval, winningConfig) => {\n  const $currentScore = document.getElementById(\"currentScore\");\n  const $timer = document.querySelector(\".timer\");\n  const $clearBtn = document.getElementById(\"clearBtn\");\n  const $stopWatch = document.getElementById(\"stopWatch\");\n\n  $timer.classList.add(\"show\");\n  let counter = winningConfig.timeLimit;\n\n  let gameTimer = setInterval(function () {\n    if (counter <= 0) {\n      clearInterval(gameTimer);\n      $clearBtn.click();\n    }\n    $stopWatch.innerHTML = \"00:\" + zeroPad(counter, 2);\n    counter = counter - 1;\n    if (counter >= 0 && +$currentScore.innerHTML >= 10) {\n      openModal(gameInterval, instance.state);\n      //alert('you have won!');\n      clearInterval(gameTimer);\n      //$clearBtn.click();\n      $stopWatch.innerHTML = \"00:00\";\n      //alert('you loose');\n    }\n  }, 1000);\n\n  function zeroPad(num, places) {\n    var zero = places - num.toString().length + 1;\n    return Array(+(zero > 0 && zero)).join(\"0\") + num;\n  }\n};\n\nconst clearTimer = (timerId) => {\n  clearInterval(timerId);\n};\n\nexport { startTimer, clearTimer };\n","export const SMALL_VIEWPORT = 768;\nexport const INITIAL_SIZE = 10;\nexport const INITIAL_SLIDER_VALUE = 50;\nexport const NEW_DOT_INTERVAL = 1000;\nexport const isCompetition = false;\nexport const winningConfig = {\n  timeLimit: 10,\n  scoreToComplete: 15\n};\n","import {\n  updateSliderHTML,\n  updateScoreDOM,\n  toggleStartBtn,\n  resetGameBoard,\n  displayElement,\n  pauseDots\n} from \"./util\";\nimport { addDot } from \"./dot\";\nimport { startTimer, clearTimer } from \"./timer\";\nimport {\n  SMALL_VIEWPORT,\n  INITIAL_SIZE,\n  INITIAL_SLIDER_VALUE,\n  NEW_DOT_INTERVAL,\n  isCompetition,\n  winningConfig\n} from \"./constant\";\n\nimport instance from \"./state\";\n\nconst dotsGameInit = function (config = {}) {\n  // DOM Elements\n  const $slider = document.getElementById(\"speedControl\");\n  const $startButton = document.getElementById(\"startBtn\");\n  const $resetButton = document.getElementById(\"clearBtn\");\n  const $modeSelectionDD = document.querySelector(\".mode__selection\");\n  const $changeMode = document.getElementById(\"changeMode\");\n\n  //Default config of the game and can be overwritten by config passed by user\n  const defaultConfig = {\n    INITIAL_SIZE,\n    INITIAL_SLIDER_VALUE,\n    NEW_DOT_INTERVAL,\n    isCompetition,\n    winningConfig\n  };\n\n  // Overwritting the default config by user config\n  config = { ...defaultConfig, ...config };\n\n  //Initial State\n  // let gameInitialState = {\n  //   currentSpeed: $slider.value,\n  //   score: 0,\n  //   isPlaying: false\n  // };\n\n  //let { state: initialState, setState, getState } = instance;\n\n  let gameInterval;\n\n  //Default behavior when the game loads initialy\n  updateSliderHTML(instance.getState(\"currentSpeed\"));\n  updateScoreDOM(0);\n  if (window.innerWidth > SMALL_VIEWPORT) {\n    displayElement($modeSelectionDD);\n  }\n\n  //Attaching event listener to the objects\n\n  // Update currentSpeed when slider is adjusted\n  $slider.addEventListener(\"input\", (event) => {\n    const { value } = event.target;\n    instance.setState(\"currentSpeed\", value);\n    //gameInitialState.currentSpeed = value;\n    updateSliderHTML(value);\n  });\n\n  // Capture start/pause lick\n  $startButton.addEventListener(\"click\", () => {\n    let isPlaying = instance.getState(\"isPlaying\");\n    instance.setState(\"isPlaying\", !isPlaying);\n    toggleStartBtn(!isPlaying);\n    // const { isPlaying } = gameInitialState;\n    // gameInitialState.isPlaying = !isPlaying;\n    //toggleStartBtn(gameInitialState.isPlaying);\n\n    // Add a dot to a random spot every second\n    //if (gameInitialState.isPlaying) {\n    if (instance.getState(\"isPlaying\")) {\n      gameInterval = setInterval(\n        () => addDot(instance.state, config.INITIAL_SIZE),\n        config.NEW_DOT_INTERVAL\n      );\n      if (config.isCompetition) {\n        startTimer(gameInterval, config.winningConfig);\n      }\n    } else {\n      clearTimer(gameInterval);\n    }\n\n    // stop the animation for all dots on the screen\n    pauseDots(instance.getState(\"isPlaying\"));\n  });\n\n  // Reset game\n  $resetButton.addEventListener(\"click\", () => {\n    resetGameBoard(gameInterval, instance.initialState);\n  });\n\n  // This only works for desktop viewport to change the mode of the game\n  $changeMode.addEventListener(\"change\", (event) => {\n    const { value } = event.target;\n    resetGameBoard(gameInterval, instance.initialState);\n    config.isCompetition = value === \"competition\" ? true : false;\n  });\n};\n\n//Game intializer with the config passed from the user\ndotsGameInit({ isCompetition: false });\n"]}