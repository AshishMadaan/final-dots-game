{"version":3,"sources":["js/util.js","js/dot.js","js/modal.js","js/timer.js","js/constant.js","js/index.js"],"names":["$currentScore","document","querySelector","$currentSpeed","$startBtn","generateRandomNumber","min","max","Math","floor","random","updateScoreDOM","newScore","innerHTML","toggleStartBtn","isPlaying","updateSliderHTML","newValue","updateScore","state","ptsToAdd","score","removeDot","dot","removeEventListener","parentNode","removeChild","getPosition","dotSize","maxWidth","clientWidth","getAnimationTime","fallRate","window","innerHeight","addPointToScore","dataset","value","resetGameBoard","myInterval","initialSliderValue","clearInterval","querySelectorAll","forEach","cage","displayElement","element","classlist","addClass","pauseDots","style","WebkitAnimationPlayState","disabled","addDot","initialSize","randomNum","dotConfig","size","position","dotHTML","createElement","classList","add","setAttribute","currentSpeed","addEventListener","appendChild","openModal","closeModel","remove","startTimer","winningConfig","getElementById","$timer","$clearBtn","$stopWatch","counter","timeLimit","gameTimer","setInterval","num","zero","click","toString","length","Array","join","clearTimer","timerId","TabletWidth","DesktopWidth","INITIAL_SIZE","INITIAL_SLIDER_VALUE","NEW_DOT_INTERVAL","isCompetition","scoreToComplete","dotsGameInit","config","$slider","$startButton","$resetButton","$changeMode","defaultConfig","gameInitialState","innerWidth","event","target"],"mappings":"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","file":"js.19e10c44.js","sourceRoot":"../src","sourcesContent":["// Update HTML methods\nconst $currentScore = document.querySelector(\"#currentScore\");\nconst $currentSpeed = document.querySelector(\"#currentSpeed\");\nconst $startBtn = document.querySelector(\"#startBtn\");\n\nconst generateRandomNumber = (min, max) =>\n  Math.floor(Math.random() * (max - min)) + min;\n\nconst updateScoreDOM = (newScore) => ($currentScore.innerHTML = newScore);\nconst toggleStartBtn = (isPlaying) =>\n  ($startBtn.innerHTML = isPlaying ? \"Pause\" : \"Start\");\n\nconst updateSliderHTML = (newValue) =>\n  ($currentSpeed.innerHTML = `${newValue}`);\n\nconst updateScore = (state, ptsToAdd) => {\n  state.score += +ptsToAdd;\n  $currentScore.innerHTML = state.score;\n};\n\nconst removeDot = (dot) => {\n  dot.removeEventListener(\"animationend\", removeDot);\n  dot.parentNode.removeChild(dot);\n};\n\n// DOts methods\n\nconst getPosition = (dotSize) => {\n  const maxWidth = document.querySelector(\".game__board\").clientWidth;\n  const leftPosition = generateRandomNumber(0, maxWidth - dotSize);\n  return leftPosition;\n};\n\nconst getAnimationTime = (fallRate) => {\n  const windowHeight = window.innerHeight;\n  return windowHeight / fallRate;\n};\n\nconst addPointToScore = (state, dot) => {\n  if (state.isPlaying) {\n    updateScore(state, dot.dataset.value);\n    removeDot(dot);\n  }\n};\n\nconst resetGameBoard = (myInterval, initialSliderValue) => {\n  updateScoreDOM(0);\n  updateSliderHTML(initialSliderValue);\n  toggleStartBtn(false);\n  document.querySelector(\"#currentSpeed\").value = initialSliderValue;\n  document.querySelector(\"#speedControl\").value = initialSliderValue;\n  clearInterval(myInterval);\n\n  // Remove all cages from dom\n  const dots = document.querySelectorAll(\".dot\");\n  dots.forEach((cage) => {\n    removeDot(cage);\n  });\n};\n\nconst displayElement = (element) => {\n  element.classlist.addClass(\"show\");\n};\n\nconst pauseDots = (isPlaying = false) => {\n  const $dots = document.querySelectorAll(\".dot\");\n  $dots.forEach((dot) => {\n    dot.style.WebkitAnimationPlayState = isPlaying ? \"running\" : \"paused\";\n    if (isPlaying) {\n      dot.disabled = false;\n    } else {\n      dot.disabled = true;\n    }\n  });\n};\n\nexport {\n  generateRandomNumber,\n  updateScore,\n  updateScoreDOM,\n  toggleStartBtn,\n  updateSliderHTML,\n  getPosition,\n  getAnimationTime,\n  addPointToScore,\n  resetGameBoard,\n  displayElement,\n  pauseDots\n};\n","import {\n  removeDot,\n  generateRandomNumber,\n  getPosition,\n  getAnimationTime,\n  addPointToScore\n} from \"./util\";\n\nexport const addDot = (state, initialSize) => {\n  const randomNum = generateRandomNumber(0, 10);\n\n  const dotSize = randomNum * 10 + initialSize;\n  const dotConfig = {\n    size: dotSize,\n    value: 10 - randomNum,\n    position: getPosition(dotSize)\n  };\n\n  const dotHTML = document.createElement(\"div\");\n  dotHTML.classList.add(\"dot\");\n  dotHTML.setAttribute(\n    \"style\",\n    `\n    height: ${dotConfig.size}px;\n    width: ${dotConfig.size}px;\n    animation: slideDown ${getAnimationTime(state.currentSpeed)}s linear;\n    left: ${dotConfig.position}px;\n    `\n  );\n  dotHTML.setAttribute(\"data-value\", `${dotConfig.value}`);\n  dotHTML.addEventListener(\"click\", () => addPointToScore(state, dotHTML));\n  dotHTML.addEventListener(\"animationend\", () => removeDot(dotHTML));\n\n  document.querySelector(\".game__board\").appendChild(dotHTML);\n};\n","import { toggleStartBtn, pauseDots } from \"./util\";\n\nconst openModal = () => {\n  const modal = document.querySelector(\".modal__overlay\");\n  modal.classList.add(\"active\");\n  pauseDots();\n  toggleStartBtn(false);\n  //gameState.isPlaying = false;\n  //clearInterval(myInterval);\n  closeModel();\n};\n\n// Close modal\nconst closeModel = () => {\n  const $closeModalButton = document.querySelector(\".close\");\n  $closeModalButton.addEventListener(\"click\", () => {\n    const modal = document.querySelector(\".modal__overlay\");\n    modal.classList.remove(\"active\");\n  });\n};\n\nexport { openModal };\n","import { openModal } from \"./modal\";\n\nconst startTimer = (winningConfig) => {\n  const $currentScore = document.getElementById(\"currentScore\");\n  const $timer = document.querySelector(\".timer\");\n  const $clearBtn = document.getElementById(\"clearBtn\");\n  const $stopWatch = $stopWatch;\n\n  $timer.classList.add(\"show\");\n  let counter = winningConfig.timeLimit;\n\n  let gameTimer = setInterval(function () {\n    if (counter <= 0) {\n      clearInterval(gameTimer);\n      $clearBtn.click();\n    }\n    $stopWatch.innerHTML = \"00:\" + zeroPad(counter, 2);\n    counter = counter - 1;\n    if (counter >= 0 && +$currentScore.innerHTML >= 10) {\n      openModal();\n      //alert('you have won!');\n      clearInterval(gameTimer);\n      $clearBtn.click();\n      $stopWatch.innerHTML = \"00:00\";\n      //alert('you loose');\n    }\n  }, 1000);\n\n  function zeroPad(num, places) {\n    var zero = places - num.toString().length + 1;\n    return Array(+(zero > 0 && zero)).join(\"0\") + num;\n  }\n};\n\nconst clearTimer = (timerId) => {\n  clearInterval(timerId);\n};\n\nexport { startTimer, clearTimer };\n","export const TabletWidth = 768;\nexport const DesktopWidth = 1024;\n\nexport const INITIAL_SIZE = 10;\nexport const INITIAL_SLIDER_VALUE = 50;\nexport const NEW_DOT_INTERVAL = 1000;\nexport const isCompetition = false;\nexport const winningConfig = {\n  timeLimit: 10,\n  scoreToComplete: 15\n};\n","import {\n  updateSliderHTML,\n  updateScoreDOM,\n  toggleStartBtn,\n  resetGameBoard,\n  displayElement\n} from \"./util\";\nimport { addDot, pauseDots } from \"./dot\";\nimport { startTimer, clearTimer } from \"./timer\";\nimport {\n  TabletWidth,\n  DesktopWidth,\n  INITIAL_SIZE,\n  INITIAL_SLIDER_VALUE,\n  NEW_DOT_INTERVAL,\n  isCompetition,\n  winningConfig\n} from \"./constant\";\n\nconst dotsGameInit = function (config = {}) {\n  const $slider = document.getElementById(\"speedControl\");\n  const $startButton = document.getElementById(\"startBtn\");\n  const $resetButton = document.getElementById(\"clearBtn\");\n  const $changeMode = document.getElementById(\"changeMode\");\n\n  const defaultConfig = {\n    INITIAL_SIZE,\n    INITIAL_SLIDER_VALUE,\n    NEW_DOT_INTERVAL,\n    isCompetition,\n    winningConfig\n  };\n\n  config = { ...defaultConfig, ...config };\n\n  let gameInitialState = {\n    currentSpeed: $slider.value,\n    score: 0,\n    isPlaying: false\n  };\n\n  let myInterval;\n\n  updateSliderHTML(gameInitialState.currentSpeed);\n  updateScoreDOM(0);\n  if (window.innerWidth > TabletWidth && window.innerWidth < DesktopWidth) {\n    displayElement($changeMode);\n  }\n\n  // Update currentSpeed when slider is adjusted\n  $slider.addEventListener(\"input\", (event) => {\n    const { value } = event.target;\n    gameInitialState.currentSpeed = value;\n    updateSliderHTML(value);\n  });\n\n  // Capture button press\n  $startButton.addEventListener(\"click\", () => {\n    const { isPlaying } = gameInitialState;\n    gameInitialState.isPlaying = !isPlaying;\n    toggleStartBtn(gameInitialState.isPlaying);\n\n    // Add a cage to a random spot every second\n    if (gameInitialState.isPlaying) {\n      myInterval = setInterval(\n        () => addDot(gameInitialState, config.INITIAL_SIZE),\n        config.NEW_DOT_INTERVAL\n      );\n      if (config.isCompetition) {\n        startTimer(config.winningConfig);\n      }\n    } else {\n      clearTimer(myInterval);\n    }\n\n    // Grab all cages from the dom and pause animation\n    pauseDots(gameInitialState.isPlaying);\n  });\n\n  // Reset game\n  $resetButton.addEventListener(\"click\", () => {\n    resetGameBoard(myInterval, config.INITIAL_SLIDER_VALUE);\n  });\n\n  $changeMode.addEventListener(\"change\", (event) => {\n    const { value } = event.target;\n    config.isCompetition = value === \"competition\" ? true : false;\n  });\n};\n\ndotsGameInit({ isCompetition: false });\n"]}