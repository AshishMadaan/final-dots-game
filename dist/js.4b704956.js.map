{"version":3,"sources":["js/util.js","js/dot.js","js/timer.js","js/index.js"],"names":["$currentScore","document","querySelector","$currentSpeed","$startBtn","generateRandomNumber","min","max","Math","floor","random","updateScoreDOM","newScore","innerHTML","toggleStartBtn","isPlaying","updateSliderHTML","newValue","updateScore","state","ptsToAdd","score","removeDot","dot","removeEventListener","parentNode","removeChild","getPosition","dotSize","maxWidth","clientWidth","getAnimationTime","fallRate","initialRate","window","innerHeight","addPointToScore","dataset","value","resetGameBoard","myInterval","initialSliderValue","clearInterval","querySelectorAll","forEach","cage","addDot","size","randNum","dotData","position","dotHTML","createElement","classList","add","setAttribute","currentSpeed","addEventListener","appendChild","pauseDots","style","WebkitAnimationPlayState","disabled","startTimer","winningConfig","counter","timeLimit","gameTimer","setInterval","num","zero","click","getElementById","toString","length","Array","join","openModal","clearTimer","timerId","dotsGameInit","config","Object","assign","INITIAL_SIZE","INITIAL_RATE","INITIAL_SLIDER_VALUE","NEW_DOT_INTERVAL","isCompetition","scoreToComplete","console","log","$slider","$startButton","$resetButton","gameState","event","target"],"mappings":"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","file":"js.4b704956.js","sourceRoot":"../src","sourcesContent":["// Update HTML methods\nconst $currentScore = document.querySelector(\"#currentScore\");\nconst $currentSpeed = document.querySelector(\"#currentSpeed\");\nconst $startBtn = document.querySelector(\"#startBtn\");\n\nconst generateRandomNumber = (min, max) =>\n  Math.floor(Math.random() * (max - min)) + min;\n\nconst updateScoreDOM = (newScore) => ($currentScore.innerHTML = newScore);\nconst toggleStartBtn = (isPlaying) =>\n  ($startBtn.innerHTML = isPlaying ? \"Pause\" : \"Start\");\n\nconst updateSliderHTML = (newValue) =>\n  ($currentSpeed.innerHTML = `${newValue}`);\n\nconst updateScore = (state, ptsToAdd) => {\n  state.score += +ptsToAdd;\n  $currentScore.innerHTML = state.score;\n};\n\nconst removeDot = (dot) => {\n  dot.removeEventListener(\"animationend\", removeDot);\n  dot.parentNode.removeChild(dot);\n};\n\n// DOts methods\n\nconst getPosition = (dotSize) => {\n  const maxWidth = document.querySelector(\".game__board\").clientWidth;\n  const leftPosition = generateRandomNumber(0, maxWidth - dotSize);\n  return leftPosition;\n};\n\nconst getAnimationTime = (fallRate, initialRate) => {\n  const windowHeight = window.innerHeight;\n  return windowHeight / (fallRate * initialRate);\n};\n\nconst addPointToScore = (state, dot) => {\n  if (state.isPlaying) {\n    updateScore(state, dot.dataset.value);\n    removeDot(dot);\n  }\n};\n\nconst resetGameBoard = (myInterval, initialSliderValue) => {\n  updateScoreDOM(0);\n  updateSliderHTML(initialSliderValue);\n  toggleStartBtn(false);\n  document.querySelector(\"#currentSpeed\").value = initialSliderValue;\n  document.querySelector(\"#speedControl\").value = initialSliderValue;\n  clearInterval(myInterval);\n\n  // Remove all cages from dom\n  const dots = document.querySelectorAll(\".dot\");\n  dots.forEach((cage) => {\n    removeDot(cage);\n  });\n};\n\nexport {\n  generateRandomNumber,\n  updateScore,\n  updateScoreDOM,\n  toggleStartBtn,\n  updateSliderHTML,\n  getPosition,\n  getAnimationTime,\n  addPointToScore,\n  resetGameBoard\n};\n","import {\n  generateRandomNumber,\n  getPosition,\n  getAnimationTime,\n  addPointToScore\n} from \"./util\";\n\nconst addDot = (state, size, initialRate) => {\n  const randNum = generateRandomNumber(0, 10);\n\n  const dotSize = randNum * 10 + size;\n  const dotData = {\n    size: dotSize,\n    value: 10 - randNum,\n    position: getPosition(dotSize)\n  };\n\n  const dotHTML = document.createElement(\"div\");\n  dotHTML.classList.add(\"dot\");\n  dotHTML.setAttribute(\n    \"style\",\n    `\n    height: ${dotData.size}px;\n    width: ${dotData.size}px;\n    animation: slideDown ${getAnimationTime(\n      state.currentSpeed,\n      initialRate\n    )}s linear;\n    left: ${dotData.position}px;\n    `\n  );\n  dotHTML.setAttribute(\"data-value\", `${dotData.value}`);\n  dotHTML.addEventListener(\"click\", () => addPointToScore(state, dotHTML));\n  dotHTML.addEventListener(\"animationend\", () => removeDot(dotHTML));\n\n  document.querySelector(\".game__board\").appendChild(dotHTML);\n};\n\nconst pauseDots = (isPlaying = false) => {\n  const $dots = document.querySelectorAll(\".dot\");\n  $dots.forEach((dot) => {\n    dot.style.WebkitAnimationPlayState = isPlaying ? \"running\" : \"paused\";\n    if (isPlaying) {\n      dot.disabled = false;\n    } else {\n      dot.disabled = true;\n    }\n  });\n};\n\nexport { addDot, pauseDots };\n","const startTimer = (winningConfig) => {\n  const $currentScore = document.querySelector(\"#currentScore\");\n  document.querySelector(\".timer\").classList.add(\"active\");\n  //let timeLimit = winningConfig.timeLimit;\n  let counter = winningConfig.timeLimit;\n\n  let gameTimer = setInterval(function () {\n    if (counter <= 0) {\n      clearInterval(gameTimer);\n      document.querySelector(\"#clearBtn\").click();\n    }\n    document.getElementById(\"stopWatch\").innerHTML =\n      \"00:\" + zeroPad(counter, 2);\n    counter = counter - 1;\n    if (counter >= 0 && +$currentScore.innerHTML >= 10) {\n      openModal();\n      //alert('you have won!');\n      clearInterval(gameTimer);\n      document.querySelector(\"#clearBtn\").click();\n      document.getElementById(\"stopWatch\").innerHTML = \"00:00\";\n      //alert('you loose');\n    }\n  }, 1000);\n\n  function zeroPad(num, places) {\n    var zero = places - num.toString().length + 1;\n    return Array(+(zero > 0 && zero)).join(\"0\") + num;\n  }\n};\n\nconst clearTimer = (timerId) => {\n  clearInterval(timerId);\n};\n\nexport { startTimer, clearTimer };\n","import {\n  updateSliderHTML,\n  updateScoreDOM,\n  toggleStartBtn,\n  resetGameBoard\n} from \"./util\";\nimport { addDot, pauseDots } from \"./dot\";\nimport { startTimer, clearTimer } from \"./timer\";\n\nconst dotsGameInit = function (config = {}) {\n  const settings = {\n    INITIAL_SIZE: 10,\n    INITIAL_RATE: 1,\n    INITIAL_SLIDER_VALUE: 50,\n    NEW_DOT_INTERVAL: 1000,\n    isCompetition: false,\n    winningConfig: {\n      timeLimit: 10,\n      scoreToComplete: 15\n    }\n  };\n\n  config = Object.assign({}, settings, config);\n\n  console.log(config, \"config\");\n\n  const $slider = document.querySelector(\"#speedControl\");\n  const $startButton = document.querySelector(\"#startBtn\");\n  const $resetButton = document.querySelector(\"#clearBtn\");\n  //const instructionsButton = document.querySelector('#instructions');\n\n  // Global variables\n  let gameState = {\n    currentSpeed: $slider.value,\n    score: 0,\n    isPlaying: false\n  };\n  let myInterval;\n\n  updateSliderHTML(gameState.currentSpeed);\n  updateScoreDOM(0);\n\n  // Update currentSpeed when slider is adjusted\n  $slider.addEventListener(\"input\", (event) => {\n    const { value } = event.target;\n    gameState.currentSpeed = value;\n    updateSliderHTML(value);\n  });\n\n  // Capture button press\n  $startButton.addEventListener(\"click\", () => {\n    const { isPlaying } = gameState;\n    gameState.isPlaying = !isPlaying;\n    toggleStartBtn(gameState.isPlaying);\n\n    // Add a cage to a random spot every second\n    if (gameState.isPlaying) {\n      myInterval = setInterval(\n        () => addDot(gameState, config.INITIAL_SIZE, config.INITIAL_RATE),\n        config.NEW_DOT_INTERVAL\n      );\n      if (config.isCompetition) {\n        startTimer(config.winningConfig);\n      }\n    } else {\n      clearTimer(myInterval);\n    }\n\n    // Grab all cages from the dom and pause animation\n    pauseDots(gameState.isPlaying);\n  });\n\n  // Reset game\n  $resetButton.addEventListener(\"click\", () => {\n    resetGameBoard(myInterval, config.INITIAL_SLIDER_VALUE);\n  });\n};\n\ndotsGameInit({ isCompetition: false });\n"]}