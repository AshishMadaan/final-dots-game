{"version":3,"sources":["js/state.js","js/util.js","js/dot.js","js/modal.js","js/timer.js","js/constant.js","js/index.js"],"names":["GameStore","$slider","document","getElementById","instance","state","currentSpeed","value","score","isPlaying","timerInterval","prop","Object","freeze","generateRandomNumber","min","max","Math","floor","random","updateScoreDOM","newScore","$currentScore","innerHTML","updateSliderHTML","newValue","$currentSpeed","updateScore","scoreToAdd","toggleStartBtn","$startBtn","removeDot","dot","removeEventListener","parentNode","removeChild","getPosition","dotSize","maxWidth","querySelector","clientWidth","leftPosition","getAnimationTime","fallRate","windowHeight","window","innerHeight","addPointToScore","dataset","resetGameBoard","gameInterval","gameInitialState","classList","remove","clearInterval","getState","resetDropDown","querySelectorAll","removeAllDots","element","i","length","selected","defaultSelected","dots","forEach","cage","displayElement","add","pauseDots","$dots","style","WebkitAnimationPlayState","disabled","addDot","initialSize","$gameBoard","randomNum","dotConfig","size","position","dotHTML","createElement","setAttribute","addEventListener","appendChild","openModal","modal","$closeModalButton","startTimer","winningConfig","$timer","$clearBtn","$stopWatch","counter","timeLimit","gameTimer","setInterval","click","zeroPad","setState","num","places","zero","toString","Array","join","clearTimer","timerId","SMALL_VIEWPORT","INITIAL_SIZE","INITIAL_SLIDER_VALUE","NEW_DOT_INTERVAL","isCompetition","scoreToComplete","dotsGameInit","config","$startButton","$resetButton","$modeSelectionDD","$changeMode","defaultConfig","innerWidth","event","target"],"mappings":";;AMAA;;AAQA;;ADRA,ACSA;ADPO,AHFP,ACAA,ACAA,AHAA,IIEa6G,cAAc,GAAG,GAAvB;ACQP;ADPO,AHKP,ACNA,ACDA,ICEaC,YAAY,GAAG,EAArB;AHMA,AIUP,AHhBA,IDMapC,ACNPY,MDMa,GAAG,ACNP,GAAG,MDMLZ,GCNPY,GDMgB,CAACjF,KAAD,ACNJ,CAAC6C,CDMWyB,WAAR,ACNJ,EDM4B,ACNbtE,KAAf,EAAyB;AECpC,AJFP,ECQE,ACNA,EEAW0G,AJFPjG,ECQE8D,ACNAW,KAAK,GAAGrF,EDME,GAAGA,GCNG,CAACqC,CEAQ,AJFP,GIEU,AHMP,ADRA,CCQCA,CGNvB,OFAS,AFFVzB,CEEiC,IDMlB,CAAuB,YCN5B,CAAd,CDMmB,ADRQ,CCQ3B,ADR4BC,GAAD,EAAMC,GAAN;ECS3B,ACNA,AFH2B,ICSrB6D,ACNAW,GFFNvE,IAAI,CAACC,CCQU,GAAG,CDRlB,CAAWD,ECQOH,CCNK,CFFR,CAACK,CEEUjB,KFFf,GEEuB,CAACqC,EFFPvB,GAAG,GAAGD,GAAvB,CAAX,CCQkB,ACNQ,CAAuB,CDMV,CAArB,ADRwBA,ECQA,CDTf,CCST,CAAlB,CCN0B,CAA1B;AEAK,ALLP,AIGA,AHD6B,CAA7B,CCWE,ACNAwE,EEFWyB,EHQL3E,CCND,CAACe,KDMO,GAAGyB,CCNhB,CAAgBT,EEFW,CFE3B,CAAoB,CEFU,EHQL,EGRpB,CHQuB,EAAZ,ACNhB,GDMiCO,WAAjC;AETF,EFUE,ACNA,EHNI3E,AIEAyF,EFUEX,ACNNT,QCJc,CFUC,EEVE,CFUC,GCNlB,KCJIoB,UAAa,CAACvC,YAAD,EAAewC,aAAf,EAAiC;ACE7C,EFGL,AHNA,AIEA,ECCWuB,AHSTlC,ECNFlD,ACJMP,EFUA,EAAEe,OGTgB,AHQN,EETC,CCCQ,EDDLnC,CJFR,EKGT,CFGL,EAAe,ECJe,CAACC,EDI/B,YCJsB,CAAwB,cAAxB,CAAtB;EDMAqF,ACLA,EFUEjF,AFbY,EIGRoF,GFUC,EAAE,CEVG,GAAGzF,CFUD2E,GCLG,CAACO,GCLK,CAAC7C,CFQN,WCHlB,CAAmC,ACLpB,CAAuB,MDKtC,EAA4C,ACL7B,CAAf,WDKkD;AEJ7C,AJFP,EGEE,ECAWmD,AHUTV,ACLA,AFPE5D,EGEEwE,EDKEL,IDKE,CCLG,CDKD,CEVG,CDKCrF,CELQ,CHUZkC,AEVMlC,AHFA,EIES,CJFN,GEOG,CAACqC,CCLC,CAACpC,GHFvBiB,KCYQ,EAAYiB,CCLR,CAAuB,ECLrB,CAAwB,EFU9B,ADZS,CAAChB,OGEJ,CAAlB,AHFqB,EAAc,CEOnB,CAAd;EEJF0E,AHMkB,AENlB,AHFA,CCQA,CCDER,AHTA,EIIIM,AHFAvE,EDFErB,CGSD,CAACmD,CELC,EAAE,EADgB,ALHZ,CIIC,EJJElD,CGShB,ACLiBA,AHFA,CEODmD,EFPInD,IEOpB,AHTwB,CGSD,AHTEC,AIIA,CAACA,EHFE,CAACA,IEO7B,MHTgB,CAAwB,AIIvB,CAAwB,EHFrB,CAAwB,QGE3B,CAAnB,CJJkB,CAAhB,GCEoB,CAAtB;EIGA+G,AHWA,AEVAvB,AHHArE,EEOE,EDMI2D,ECNJhC,ACJI,CAACG,IFUM,EDbA,CCaGlD,ADbFqB,CIEC,CDCf,CCDiB,ADCA6C,ECHU,CDG3B,CAAqB,CFUG,CAACc,ADbzB,GEOE,AFPwB7D,CGG1B,CDIiB6B,MFPjB,ECagB,CAAuB,GCNrC,EDMc,ACNe7C,CDM/B,ICNE;AGOJ,ALbC,CAHD,CIKEuG,AHWA3B,ACNC,ACJD,CDAA,CHNE,EIMEa,EJNE,CKKC,AHWA,AFhBA9F,CEgBCoD,CGXC,EDCE,GAAGsC,EJNE,CEgBhB,AFhBiBtF,CEgBCgE,GAAlB,CAAsB,GFhBpB,EEgBF,AFhB2B,AIMA,CAAC2B,SAA5B;ACJ2B,ACe7B,AHNC,CETM,AFJP,CDmBEd,AETA,EESIkC,ENhBA,AIOAnB,GFSG,CAACb,CFhBC9E,IIOI,CESG,ANhBZ,EIOY4F,CESG,ANhBF,GEgBjB,CACE,KIDEkB,CFTuB,CFS3B,AET4B,UEST,EFTqB,CESE,aJG9BrC,SAAS,CAACC,IAHtB,6BAIWD,SAAS,CAACC,IAJrB,2CAKyB,IAAArC,sBAAA,EAAiBrC,KAAK,CAACC,YAAvB,CALzB,kCAMUwE,SAAS,CAACE,QANpB;EASAC,AIT0C,EFRxC,EEQ2BmC,ENfvB9G,AIOAwF,CFiBC,CAACX,EITkC,GFR7B,IAAI,CJPC,AIOhB,EFiBF,AFxBoBlF,AIOA,CFiBC,MFxBM,CAACM,KEwB5B,AFzBiB,YEyBqBuE,SAAS,CAACvE,KAAhD,qBITsC,EAAI;EJU1C0E,AITA,IFRI3B,EJPE9C,CEwBC,CAAC4E,GFxBG,EAAE,CAFI,GISA,CAACY,MFiBlB,CAAyB,EEjBR,CAAb,IFiBJ,EAAkC;ADtBpC,EKcE,EJQkC,ADtB9BxE,EKcEvB,AFRF2F,EJPEnF,GEuBkC,EIR3B,EJQ2BsC,AEhB3B,CEQG7C,AFRFgG,CJPC,EAAE,CCCG,CGMhB,EHNmB,CKcC,ANlBP,CMkBQ/F,OLdrBqB,ICsBoC,EAAgBnB,CIRxC,CAAwB,GJQA,EAAuB4E,GDtBxC,CAACxD,GCsBgB,CAAN,CIRlB,CAAhB,ELduB,EAAc;ECsBH,AIPlC,ALdA,CCqBA,CEfG,EEQG4F,ALdA3F,EDDAhB,UMeY,CLdC,EKcER,ANfF,CCCGA,CDDD,MMeQ,CAACC,ALdA,CAACA,aKcV,CAAwB,ALdvB,CAAwB,SKczB,CAArB,ILdsB,CAAtB;ECsBA8E,AIPA,ALdAvD,IKcM4F,ANpBW,CAAb,EE2BG,CAAClC,KDrBK,CAAC7D,EKcI,GAAGrB,ILdrB,CCqBA,CAAyB,EIPI,CAACC,QLdDsB,GCqB7B,EAAyC,CIPpB,CAAwB,CLd7C,SKcqB,CAArB;ALbD,CAHD,CKiBE,EJMyC,AEfvCoE,EESI0B,ANfFvH,KEqB2C,GEfnC,CFemC+B,AFrBlC,AIMAR,CJNCnB,MMeQ,ENflB,AIMF,CESuBF,ENfA,AIMA,GFesB,CFrB3C,CEqBqD+E,CINxB,CAAC1C,CFTD4D,IFec,CAAN,EEfD,CAACL,IEShB,CAAuB,EFTR,EAAU,CAAV,CAAtC,YESuB,CAAzB;EJMyC,AILzC,CJKA,CFpBG,AIMDA,EESI0B,KFTG,GAAG1B,GESK,GAAG5F,CFTD,GAAG,CAApB,GES0B,CAACC,cAAT,CAAwB,YAAxB,CAApB,CAN0C,CAQ1C;EJKAyE,UAAU,CAACS,WAAX,CAAuBJ,OAAvB;AACD,CA3BM,CIsBL,ENhBE,AIKA,EEWIwC,EFXA3B,GJLG9F,IIKI,IEWM,AFXF,CJLC,AIKZ,CJLaI,CMgBG,EFXA,CAACkB,IJLrB,SIKkC,CAACC,SAAf,IAA4B,EAAhD,EAAoD;AHLxD,EDCG,EMgBCuF,ALjBEnF,EGMA,IAAA2D,KHNW,CKiBD,EAAZwB,ALjBgB,QGMd,CHNAnF,CGMUuB,UHNI,CAAC7C,CKgBG,AFVlB,EAAwBD,EHNV,EAAQwB,UGME,AHNV,CGMmBvB,CHNI,IGMrC;EHLJ,EKiBE0G,EFXEzD,AHNEhC,aGMW,AHNE,CGMD0E,EHNI9F,EKiBA,EAApB6G,GFXe,CAAb,AHN0B,CAAC5G,cAAT,CAAwB,UKexB,ILfA,CAAtB;EACAE,EKiBE2G,EFXEnB,CHNC,CAACrF,KAAN,GGMc,CAACe,AHNA,CAACK,EKiBE,EAAhBoF,IFXE,EHNJ,CGM2B,OAAvB,YEQkB;ELbtB1F,EKiBE2F,AFXC,WHNU,CAAC1F,CKiBC,EAAb0F,MLjBF,GAA0B5G,KAAK,CAACG,KAAhC,GKasB;ALZvB,CAJD,CGUG,CAZ0B,CEuBzBkF,CFXC,IAZwB,CAA3B,CJKA,MMkBe,EAAbA,UNlBO/E,IAAT,EAAeJ,KAAf,EAAsB;EMaA,CAAtB,CAT0C,CAiB1C,CNpBE,KAAKF,KAAL,CAAWM,IAAX,IAAmBJ,KAAnB;EIQFH,EJPC,YIOD,CAASgG,QAAT,CAAkB,eAAlB,EAAmCJ,SAAnC;EEaAoB,MAAM,mCAAQK,aAAR,GAA0BL,MAA1B,CAAN;ALnBF,EKqBE,AFbA,EHRIvF,EKqBAqB,KFbKiD,OEaT,AFbA,AHRkB,CKCwB,AFOzBE,CEejB,CLvBqB,CGQrB,EAAsBC,MAAtB,AHRIzE,EGQ0B,YHRT,CAACpB,SAAD,EAAe;EACpC,EGQE,EHRIqB,EGQAyE,GJRN,CIQU,GAAGD,AHRE,GAAGpG,GGQC,GAAGmG,EHRI,CGQD,AHRElG,CGQDqG,CJRjB7F,IAAT,EAAe,CIQO,GAAekD,EHRnB,CAAwB,GGQ7B,GAAiC,CAA5C,GHRgB,CAAlB;EKuBA,ALtBA/B,EGQE,EEcFN,ANtBE,KIQOiF,AHRA,CAAClF,CDAD,GIQK,CAA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","file":"js.00a46daa.js","sourceRoot":"../src","sourcesContent":["// A Singleton pattern to init and store the state of the game\n\nclass GameStore {\n  constructor() {\n    const $slider = document.getElementById(\"speedControl\");\n    if (!GameStore.instance) {\n      this.state = {\n        currentSpeed: $slider.value,\n        score: 0,\n        isPlaying: false,\n        timerInterval: null\n      };\n      GameStore.instance = this;\n    }\n\n    return GameStore.instance;\n  }\n\n  setState(prop, value) {\n    this.state[prop] = value;\n  }\n\n  getState(prop) {\n    return this.state[prop];\n  }\n}\n\nconst instance = new GameStore();\nObject.freeze(instance);\n\nexport default instance;\n","import instance from \"./state\";\n\nconst generateRandomNumber = (min, max) =>\n  Math.floor(Math.random() * (max - min)) + min;\n\nconst updateScoreDOM = (newScore) => {\n  const $currentScore = document.getElementById(\"currentScore\");\n  $currentScore.innerHTML = newScore;\n};\n\nconst updateSliderHTML = (newValue) => {\n  const $currentSpeed = document.getElementById(\"currentSpeed\");\n  $currentSpeed.innerHTML = `${newValue}`;\n};\n\nconst updateScore = (state, scoreToAdd) => {\n  const $currentScore = document.getElementById(\"currentScore\");\n  state.score += +scoreToAdd;\n  $currentScore.innerHTML = state.score;\n};\n\nconst toggleStartBtn = (isPlaying) => {\n  const $startBtn = document.getElementById(\"startBtn\");\n  $startBtn.innerHTML = isPlaying ? \"Pause\" : \"Start\";\n};\n\n// Dots methods\nconst removeDot = (dot) => {\n  dot.removeEventListener(\"animationend\", removeDot);\n  dot.parentNode.removeChild(dot);\n};\n\nconst getPosition = (dotSize) => {\n  const maxWidth = document.querySelector(\".game__board\").clientWidth;\n  const leftPosition = generateRandomNumber(0, maxWidth - dotSize);\n  return leftPosition;\n};\n\nconst getAnimationTime = (fallRate) => {\n  const windowHeight = window.innerHeight;\n  return windowHeight / fallRate;\n};\n\nconst addPointToScore = (state, dot) => {\n  if (state.isPlaying) {\n    updateScore(state, dot.dataset.value);\n    removeDot(dot);\n  }\n};\n\nconst resetGameBoard = (gameInterval, gameInitialState) => {\n  gameInitialState.score = 0;\n  gameInitialState.isPlaying = false;\n  gameInitialState.currentSpeed = 50;\n  updateScoreDOM(0);\n  updateSliderHTML(gameInitialState.currentSpeed);\n  toggleStartBtn(false);\n  document.getElementById(\"currentSpeed\").value = gameInitialState.currentSpeed;\n  document.querySelector(\".timer\").classList.remove(\"show\");\n  document.getElementById(\"speedControl\").value = gameInitialState.currentSpeed;\n  clearInterval(gameInterval);\n  clearInterval(instance.getState(\"timerInterval\"));\n  resetDropDown(document.querySelectorAll(\"#changeMode option\"));\n\n  // Remove all dots from dom\n  removeAllDots();\n};\n\nconst resetDropDown = (element) => {\n  for (let i = 0; i < element.length; i++) {\n    element[i].selected = element[i].defaultSelected;\n  }\n};\n\nconst removeAllDots = () => {\n  const dots = document.querySelectorAll(\".dot\");\n  dots.forEach((cage) => {\n    removeDot(cage);\n  });\n};\n\nconst displayElement = (element) => {\n  element.classList.add(\"show\");\n};\n\nconst pauseDots = (isPlaying = false) => {\n  const $dots = document.querySelectorAll(\".dot\");\n  $dots.forEach((dot) => {\n    dot.style.WebkitAnimationPlayState = isPlaying ? \"running\" : \"paused\";\n    if (isPlaying) {\n      dot.disabled = false;\n    } else {\n      dot.disabled = true;\n    }\n  });\n};\n\nexport {\n  generateRandomNumber,\n  updateScore,\n  updateScoreDOM,\n  toggleStartBtn,\n  updateSliderHTML,\n  getPosition,\n  getAnimationTime,\n  addPointToScore,\n  resetGameBoard,\n  removeAllDots,\n  displayElement,\n  pauseDots,\n  removeDot\n};\n","import {\n  removeDot,\n  generateRandomNumber,\n  getPosition,\n  getAnimationTime,\n  addPointToScore\n} from \"./util\";\n\n// A method to add the dot on the Game board\nexport const addDot = (state, initialSize) => {\n  const $gameBoard = document.querySelector(\".game__board\");\n  const randomNum = generateRandomNumber(0, 10);\n\n  const dotSize = randomNum * 10 + initialSize;\n  const dotConfig = {\n    size: dotSize,\n    value: 10 - randomNum,\n    position: getPosition(dotSize)\n  };\n\n  const dotHTML = document.createElement(\"div\");\n  dotHTML.classList.add(\"dot\");\n  dotHTML.setAttribute(\n    \"style\",\n    `\n    height: ${dotConfig.size}px;\n    width: ${dotConfig.size}px;\n    animation: slideDown ${getAnimationTime(state.currentSpeed)}s linear;\n    left: ${dotConfig.position}px;\n    `\n  );\n  dotHTML.setAttribute(\"data-value\", `${dotConfig.value}`);\n  dotHTML.addEventListener(\"click\", () => addPointToScore(state, dotHTML));\n  dotHTML.addEventListener(\"animationend\", () => removeDot(dotHTML));\n\n  $gameBoard.appendChild(dotHTML);\n};\n","import { toggleStartBtn, pauseDots, resetGameBoard } from \"./util\";\n\n// A basic modal overlay to which gives winning game information\nconst openModal = (gameInterval, state) => {\n  const modal = document.querySelector(\".modal__overlay\");\n  const $closeModalButton = document.querySelector(\".close\");\n\n  modal.classList.add(\"active\");\n  pauseDots();\n  toggleStartBtn(false);\n\n  $closeModalButton.addEventListener(\"click\", () => {\n    const modal = document.querySelector(\".modal__overlay\");\n    modal.classList.remove(\"active\");\n    resetGameBoard(gameInterval, state);\n  });\n};\n\nexport { openModal };\n","import { openModal } from \"./modal\";\nimport instance from \"./state\";\n\n// A timer plays if you play game in competition mode\nconst startTimer = (gameInterval, winningConfig) => {\n  const $currentScore = document.getElementById(\"currentScore\");\n  const $timer = document.querySelector(\".timer\");\n  const $clearBtn = document.getElementById(\"clearBtn\");\n  const $stopWatch = document.getElementById(\"stopWatch\");\n\n  $timer.classList.add(\"show\");\n  let counter = winningConfig.timeLimit;\n\n  let gameTimer = setInterval(function () {\n    if (counter <= 0) {\n      clearInterval(gameTimer);\n      $clearBtn.click();\n    }\n    $stopWatch.innerHTML = \"00:\" + zeroPad(counter, 2);\n    counter = counter - 1;\n    if (counter >= 0 && +$currentScore.innerHTML >= 10) {\n      openModal(gameInterval, instance.state);\n      clearInterval(gameTimer);\n      $stopWatch.innerHTML = \"00:00\";\n    }\n  }, 1000);\n\n  instance.setState(\"timerInterval\", gameTimer);\n\n  function zeroPad(num, places) {\n    var zero = places - num.toString().length + 1;\n    return Array(+(zero > 0 && zero)).join(\"0\") + num;\n  }\n};\n\nconst clearTimer = (timerId) => {\n  clearInterval(timerId);\n};\n\nexport { startTimer, clearTimer };\n","// Constant configuration\n\nexport const SMALL_VIEWPORT = 768;\nexport const INITIAL_SIZE = 10;\nexport const INITIAL_SLIDER_VALUE = 50;\nexport const NEW_DOT_INTERVAL = 1000;\nexport const isCompetition = false;\nexport const winningConfig = {\n  timeLimit: 10,\n  scoreToComplete: 15,\n  timerId: null\n};\n","import {\n  updateSliderHTML,\n  updateScoreDOM,\n  toggleStartBtn,\n  resetGameBoard,\n  displayElement,\n  pauseDots\n} from \"./util\";\nimport { addDot } from \"./dot\";\nimport { startTimer, clearTimer } from \"./timer\";\nimport {\n  SMALL_VIEWPORT,\n  INITIAL_SIZE,\n  INITIAL_SLIDER_VALUE,\n  NEW_DOT_INTERVAL,\n  isCompetition,\n  winningConfig\n} from \"./constant\";\n\nimport instance from \"./state\";\n\n// Main method to initialize the Gameboard and all its events\nconst dotsGameInit = function (config = {}) {\n  // DOM Elements\n  const $slider = document.getElementById(\"speedControl\");\n  const $startButton = document.getElementById(\"startBtn\");\n  const $resetButton = document.getElementById(\"clearBtn\");\n  const $modeSelectionDD = document.querySelector(\".mode__selection\");\n  const $changeMode = document.getElementById(\"changeMode\");\n\n  //Default config of the game and can be overwritten by config passed by user\n  const defaultConfig = {\n    INITIAL_SIZE,\n    INITIAL_SLIDER_VALUE,\n    NEW_DOT_INTERVAL,\n    isCompetition,\n    winningConfig\n  };\n\n  // Overwritting the default config by user config\n  config = { ...defaultConfig, ...config };\n\n  let gameInterval;\n\n  //Default behavior when the game loads initialy\n  updateSliderHTML(instance.getState(\"currentSpeed\"));\n  updateScoreDOM(0);\n  if (window.innerWidth > SMALL_VIEWPORT) {\n    displayElement($modeSelectionDD);\n  }\n\n  //Attaching event listener to the elements on the Game board\n\n  // Update currentSpeed when slider is adjusted\n  $slider.addEventListener(\"input\", (event) => {\n    const { value } = event.target;\n    instance.setState(\"currentSpeed\", value);\n    updateSliderHTML(value);\n  });\n\n  // Capture start/pause lick\n  $startButton.addEventListener(\"click\", () => {\n    let isPlaying = instance.getState(\"isPlaying\");\n    instance.setState(\"isPlaying\", !isPlaying);\n    toggleStartBtn(!isPlaying);\n\n    // Add a dot to a random spot every second\n    if (instance.getState(\"isPlaying\")) {\n      gameInterval = setInterval(\n        () => addDot(instance.state, config.INITIAL_SIZE),\n        config.NEW_DOT_INTERVAL\n      );\n      if (config.isCompetition) {\n        startTimer(gameInterval, config.winningConfig);\n      }\n    } else {\n      clearTimer(gameInterval);\n    }\n\n    // stop the animation for all dots on the screen\n    pauseDots(instance.getState(\"isPlaying\"));\n  });\n\n  // Reset game will reset all the controls\n  $resetButton.addEventListener(\"click\", () => {\n    resetGameBoard(gameInterval, instance.state);\n  });\n\n  // This only works for desktop viewport to change the mode of the game\n  $changeMode.addEventListener(\"change\", (event) => {\n    const { value } = event.target;\n    //resetGameBoard(gameInterval, instance.state);\n    config.isCompetition = value === \"competition\" ? true : false;\n  });\n};\n\n//Game intializer with the config passed from the user\ndotsGameInit({ isCompetition: false });\n"]}